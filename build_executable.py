#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar execut√°vel do Sistema de Cota√ß√£o de Valores Farm√°cia
Cria um execut√°vel standalone com todas as depend√™ncias inclu√≠das
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def install_pyinstaller():
    """
    Instala PyInstaller se n√£o estiver dispon√≠vel
    """
    try:
        import PyInstaller
        print("‚úì PyInstaller j√° est√° instalado")
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úì PyInstaller instalado com sucesso")

def create_spec_file():
    """
    Cria arquivo .spec personalizado para o PyInstaller
    """
    spec_content = '''
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['api/app.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('templates', 'templates'),
        ('uploads', 'uploads'),
        ('requirements.txt', '.'),
        ('README.md', '.'),
    ],
    hiddenimports=[
        'flask',
        'pdfplumber',
        'reportlab',
        'sqlite3',
        'werkzeug',
        'jinja2',
        'markupsafe',
        'click',
        'itsdangerous',
        'blinker',
        'pdfminer',
        'pdfminer.six',
        'PIL',
        'charset_normalizer',
        'cryptography',
        'reportlab.pdfgen',
        'reportlab.lib',
        'reportlab.platypus',
        'reportlab.lib.pagesizes',
        'reportlab.lib.styles',
        'reportlab.lib.colors',
        'reportlab.lib.units',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='MegaFarma_Sistema_Cotacao',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''
    
    with open('MegaFarma.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    print("‚úì Arquivo .spec criado")

def create_startup_script():
    """
    Cria script de inicializa√ß√£o para o execut√°vel
    """
    startup_content = '''@echo off
echo ========================================
echo    MegaFarma - Sistema de Cotacao
echo ========================================
echo.
echo Iniciando o sistema...
echo.
echo O sistema sera aberto em seu navegador padrao.
echo Para acessar manualmente, use: http://localhost:5000
echo.
echo Para parar o sistema, pressione Ctrl+C
echo.

REM Muda para o diretorio do executavel
cd /d "%~dp0"

REM Executa o sistema
"MegaFarma_Sistema_Cotacao.exe"

echo.
echo Sistema finalizado.
pause
'''
    
    with open('dist/Iniciar_MegaFarma.bat', 'w', encoding='utf-8') as f:
        f.write(startup_content)
    print("‚úì Script de inicializa√ß√£o criado")

def create_readme():
    """
    Cria README para distribui√ß√£o
    """
    readme_content = '''# MegaFarma - Sistema de Cota√ß√£o de Valores

## üöÄ Como usar este execut√°vel

### Instala√ß√£o Simples:
1. Extraia todos os arquivos para uma pasta de sua escolha
2. Execute o arquivo "Iniciar_MegaFarma.bat"
3. O sistema abrir√° automaticamente no seu navegador

### Acesso Manual:
- Execute "MegaFarma_Sistema_Cotacao.exe"
- Abra seu navegador e acesse: http://localhost:5000

## üìã Funcionalidades

‚úÖ **Importa√ß√£o de PDF**: Importe tabelas de pre√ßos em formato PDF
‚úÖ **Compara√ß√£o de Pre√ßos**: Compare pre√ßos entre diferentes fornecedores
‚úÖ **Melhores Pre√ßos**: Visualize automaticamente os menores pre√ßos
‚úÖ **Relat√≥rios PDF**: Gere relat√≥rios em PDF dos melhores pre√ßos
‚úÖ **Gest√£o de Fornecedores**: Adicione e gerencie fornecedores
‚úÖ **Cores Aleat√≥rias**: Fornecedores com cores distintas para f√°cil identifica√ß√£o

## üîß Requisitos do Sistema

- **Sistema Operacional**: Windows 7/8/10/11 (64-bit)
- **Mem√≥ria RAM**: M√≠nimo 2GB
- **Espa√ßo em Disco**: 200MB livres
- **Navegador**: Chrome, Firefox, Edge ou Safari

## üìÅ Estrutura de Arquivos

```
MegaFarma/
‚îú‚îÄ‚îÄ MegaFarma_Sistema_Cotacao.exe    # Execut√°vel principal
‚îú‚îÄ‚îÄ Iniciar_MegaFarma.bat            # Script de inicializa√ß√£o
‚îú‚îÄ‚îÄ templates/                        # Interface do sistema
‚îú‚îÄ‚îÄ uploads/                          # Pasta para arquivos tempor√°rios
‚îî‚îÄ‚îÄ README_DISTRIBUICAO.txt          # Este arquivo
```

## ‚ö†Ô∏è Importante

- **N√£o mova ou delete** os arquivos da pasta `templates/`
- **Mantenha a pasta `uploads/`** para funcionamento correto
- **Firewall**: O Windows pode solicitar permiss√£o para o execut√°vel
- **Antiv√≠rus**: Alguns antiv√≠rus podem alertar sobre execut√°veis Python (√© normal)

## üÜò Solu√ß√£o de Problemas

### O sistema n√£o abre:
1. Verifique se todos os arquivos foram extra√≠dos
2. Execute como Administrador
3. Verifique se a porta 5000 n√£o est√° em uso

### Erro de importa√ß√£o de PDF:
1. Certifique-se que o arquivo √© um PDF v√°lido
2. Verifique se o PDF cont√©m tabelas de pre√ßos
3. Tente com um arquivo menor primeiro

### Navegador n√£o abre automaticamente:
- Abra manualmente: http://localhost:5000

## üìû Suporte

Para d√∫vidas ou problemas:
1. Verifique se seguiu todos os passos de instala√ß√£o
2. Consulte a se√ß√£o "Solu√ß√£o de Problemas"
3. Reinicie o sistema e tente novamente

---

**MegaFarma** - Sistema desenvolvido para otimizar a compara√ß√£o de pre√ßos de medicamentos.

*Vers√£o Execut√°vel - Distribui√ß√£o Standalone*
'''
    
    with open('dist/README_DISTRIBUICAO.txt', 'w', encoding='utf-8') as f:
        f.write(readme_content)
    print("‚úì README de distribui√ß√£o criado")

def build_executable():
    """
    Constr√≥i o execut√°vel usando PyInstaller
    """
    print("üî® Construindo execut√°vel...")
    print("‚è≥ Este processo pode levar alguns minutos...")
    
    try:
        # Limpar builds anteriores
        if os.path.exists('dist'):
            shutil.rmtree('dist')
        if os.path.exists('build'):
            shutil.rmtree('build')
        
        # Executar PyInstaller
        subprocess.check_call([
            sys.executable, "-m", "PyInstaller", 
            "--clean",
            "MegaFarma.spec"
        ])
        
        print("‚úì Execut√°vel criado com sucesso!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar execut√°vel: {e}")
        return False

def create_distribution_package():
    """
    Cria pacote completo para distribui√ß√£o
    """
    print("üì¶ Criando pacote de distribui√ß√£o...")
    
    # Criar pasta de distribui√ß√£o
    dist_folder = Path('dist')
    
    # Copiar arquivos necess√°rios
    if os.path.exists('templates'):
        if os.path.exists(dist_folder / 'templates'):
            shutil.rmtree(dist_folder / 'templates')
        shutil.copytree('templates', dist_folder / 'templates')
    
    if os.path.exists('uploads'):
        if os.path.exists(dist_folder / 'uploads'):
            shutil.rmtree(dist_folder / 'uploads')
        shutil.copytree('uploads', dist_folder / 'uploads')
    
    # Criar scripts auxiliares
    create_startup_script()
    create_readme()
    
    print("‚úì Pacote de distribui√ß√£o criado")

def main():
    """
    Fun√ß√£o principal do script de build
    """
    print("üèóÔ∏è  CONSTRUTOR DE EXECUT√ÅVEL - MEGAFARMA")
    print("=" * 50)
    print()
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('api/app.py'):
        print("‚ùå Erro: Execute este script na pasta raiz do projeto")
        print("   (onde est√° localizado o arquivo api/app.py)")
        return False
    
    try:
        # Passo 1: Instalar PyInstaller
        install_pyinstaller()
        
        # Passo 2: Criar arquivo .spec
        create_spec_file()
        
        # Passo 3: Construir execut√°vel
        if not build_executable():
            return False
        
        # Passo 4: Criar pacote de distribui√ß√£o
        create_distribution_package()
        
        print()
        print("üéâ SUCESSO! Execut√°vel criado com sucesso!")
        print("=" * 50)
        print(f"üìÅ Localiza√ß√£o: {os.path.abspath('dist')}")
        print()
        print("üìã Arquivos criados:")
        print("   ‚îú‚îÄ‚îÄ MegaFarma_Sistema_Cotacao.exe")
        print("   ‚îú‚îÄ‚îÄ Iniciar_MegaFarma.bat")
        print("   ‚îú‚îÄ‚îÄ README_DISTRIBUICAO.txt")
        print("   ‚îú‚îÄ‚îÄ templates/ (pasta)")
        print("   ‚îî‚îÄ‚îÄ uploads/ (pasta)")
        print()
        print("üöÄ Para distribuir:")
        print("   1. Comprima toda a pasta 'dist' em um arquivo ZIP")
        print("   2. Envie o ZIP para o computador de destino")
        print("   3. Extraia e execute 'Iniciar_MegaFarma.bat'")
        print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False
    
    finally:
        # Limpar arquivo .spec tempor√°rio
        if os.path.exists('MegaFarma.spec'):
            os.remove('MegaFarma.spec')

if __name__ == "__main__":
    success = main()
    
    print()
    input("Pressione Enter para sair...")
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)